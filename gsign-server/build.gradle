buildscript {
    ext {
        springBootVersion = '1.5.1.RELEASE'
    }
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath('nl.javadude.gradle.plugins:license-gradle-plugin:0.10.0')
    }
}

apply plugin: 'java'
apply plugin: 'org.springframework.boot'
apply plugin: 'license'

jar {
    baseName = 'gsign'
    version = '0.0.1-SNAPSHOT'
}
sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
    mavenCentral()
}

sourceSets {
    json {
        java {
            compileClasspath += main.output + test.output
            runtimeClasspath += main.output + test.output
            srcDir file('src/json/java')
        }
    }

    empconTest {
        java {
            compileClasspath += main.output + test.output
            runtimeClasspath += main.output + test.output
            srcDir file('src/test/java')
            include 'biz/paypay/**'
        }
        resources.srcDir file('src/test/resources')
    }
}

configurations {
    jsonCompile.extendsFrom testCompile
    jsonRuntime.extendsFrom testRuntime
    empconTestCompile.extendsFrom testCompile
    empconTestRuntime.extendsFrom testRuntime
}

dependencies {
    compile('org.springframework.boot:spring-boot-starter-jdbc')
    compile('org.springframework.boot:spring-boot-starter-web')
    compile('org.springframework.boot:spring-boot-starter-security')
    compile('org.springframework.session:spring-session')
    compile(group: 'org.postgresql', name: 'postgresql', version: '42.1.1')
    compile(group: 'com.miragesql', name: 'miragesql', version: '2.0.0')
    compile(group: 'io.springfox', name: 'springfox-swagger2', version: '2.7.0')
    compile(group: 'io.springfox', name: 'springfox-swagger-ui', version: '2.7.0')
    testCompile('org.springframework.security:spring-security-test')
    compile('org.projectlombok:lombok:1.16.18')
    testCompile('org.springframework.boot:spring-boot-starter-test')
}

task empconTest(type: Test) {
    testClassesDir = sourceSets.empconTest.output.classesDir
    classpath = sourceSets.empconTest.runtimeClasspath
    outputs.upToDateWhen { false }
}


